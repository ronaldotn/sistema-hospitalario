<?php

namespace App\Http\Controllers\API;

use App\Models\Organization;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use App\Http\Controllers\API\BaseController as BaseController;

class OrganizationController extends BaseController
{
    /**
     * ======================================
     * üîπ INDEX ‚Äì Obtener lista de organizaciones
     * ======================================
     * Lista todas las organizaciones paginadas.
     *
     * Query Params disponibles:
     * - name: filtra por nombre (like)
     * - type: filtra por tipo (hospital, laboratorio, farmacia)
     * - _count: cantidad de registros por p√°gina (default: 10)
     * - _page: n√∫mero de p√°gina (default: 1, manejado autom√°ticamente por paginate)
     *
     * üîÆ Espacio futuro:
     * - direcci√≥n, tel√©fono, email, b√∫squedas avanzadas
     */
    public function index(Request $request): JsonResponse
    {
        // ======================================
        // üîπ 0Ô∏è‚É£ Valores por defecto y seguridad
        // ======================================
        $count   = (int) ($request->_count ?? 10);
        $name    = trim($request->input('name', ''));
        $type    = trim($request->input('type', ''));

        // ======================================
        // üîπ 1Ô∏è‚É£ Construir query base
        // ======================================
        $query = Organization::query();

        // ======================================
        // üîπ 2Ô∏è‚É£ Aplicar filtros din√°micos (comentado por ahora)
        // ======================================
        // if (!empty($name)) {
        //     $query->where('name', 'like', "%{$name}%");
        // }
        //
        // if (!empty($type)) {
        //     $query->where('type', $type);
        // }

        // ======================================
        // üîπ 3Ô∏è‚É£ Ordenamiento jer√°rquico
        // ======================================
        // Por defecto, primero las m√°s recientes
        $query->orderBy('created_at', 'desc')
            ->orderBy('name', 'asc'); // desempate alfab√©tico

        // ======================================
        // üîπ 4Ô∏è‚É£ Paginaci√≥n autom√°tica
        // ======================================
        $organizations = $query->paginate($count);

        // ======================================
        // üîπ 5Ô∏è‚É£ Devolver respuesta JSON
        // ======================================

        return $this->sendResponse($organizations, 'Lista de organizaciones filtrada y ordenada');
    }

    /**
     * ======================================
     * üîπ STORE ‚Äì Crear nueva organizaci√≥n
     * ======================================
     */
    public function store(Request $request): JsonResponse
    {
        // ======================================
        // üîπ 0Ô∏è‚É£ Validar datos
        // ======================================
        $validated = $request->validate([
            'name'    => 'required|string|max:200',
            'type'    => 'nullable|string|max:100',
            'address' => 'nullable|string',
            'phone'   => 'nullable|string|max:20',
            'email'   => 'nullable|email|max:100',
        ]);

        // ======================================
        // üîπ 1Ô∏è‚É£ Crear organizaci√≥n
        // ======================================
        $organization = Organization::create($validated);

        // ======================================
        // üîπ 2Ô∏è‚É£ Respuesta
        // ======================================
        return response()->json([
            'success' => true,
            'data'    => $organization,
            'message' => 'Organizaci√≥n creada exitosamente'
        ], 201);
    }

    /**
     * ======================================
     * üîπ SHOW ‚Äì Mostrar detalle de organizaci√≥n
     * ======================================
     */
    public function show(Organization $organization): JsonResponse
    {
        return response()->json([
            'success' => true,
            'data'    => $organization,
            'message' => 'Detalle de la organizaci√≥n'
        ]);
    }

    /**
     * ======================================
     * üîπ UPDATE ‚Äì Actualizar organizaci√≥n existente
     * ======================================
     */
    public function update(Request $request, Organization $organization): JsonResponse
    {
        // ======================================
        // üîπ 0Ô∏è‚É£ Validar datos
        // ======================================
        $validated = $request->validate([
            'name'    => 'sometimes|required|string|max:200',
            'type'    => 'nullable|string|max:100',
            'address' => 'nullable|string',
            'phone'   => 'nullable|string|max:20',
            'email'   => 'nullable|email|max:100',
        ]);

        // ======================================
        // üîπ 1Ô∏è‚É£ Actualizar
        // ======================================
        $organization->update($validated);

        // ======================================
        // üîπ 2Ô∏è‚É£ Respuesta
        // ======================================
        return $this->sendResponse($organization, 'Organizaci√≥n actualizada exitosamente');
    }

    /**
     * ======================================
     * üîπ DESTROY ‚Äì Eliminar organizaci√≥n
     * ======================================
     */
    public function destroy(Organization $organization): JsonResponse
    {
        $organization->delete();

        return response()->json([
            'success' => true,
            'message' => 'Organizaci√≥n eliminada exitosamente'
        ]);
    }
}
